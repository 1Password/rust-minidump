/* automatically generated by rust-bindgen */

pub const _INTTYPES_H: ::libc::c_uint = 1;
pub const _FEATURES_H: ::libc::c_uint = 1;
pub const _DEFAULT_SOURCE: ::libc::c_uint = 1;
pub const _BSD_SOURCE: ::libc::c_uint = 1;
pub const _SVID_SOURCE: ::libc::c_uint = 1;
pub const __USE_ISOC99: ::libc::c_uint = 1;
pub const __USE_ISOC95: ::libc::c_uint = 1;
pub const __USE_POSIX_IMPLICITLY: ::libc::c_uint = 1;
pub const _POSIX_SOURCE: ::libc::c_uint = 1;
pub const __USE_POSIX: ::libc::c_uint = 1;
pub const __USE_POSIX2: ::libc::c_uint = 1;
pub const __USE_POSIX199309: ::libc::c_uint = 1;
pub const __USE_POSIX199506: ::libc::c_uint = 1;
pub const __USE_XOPEN2K: ::libc::c_uint = 1;
pub const __USE_XOPEN2K8: ::libc::c_uint = 1;
pub const _ATFILE_SOURCE: ::libc::c_uint = 1;
pub const __USE_MISC: ::libc::c_uint = 1;
pub const __USE_BSD: ::libc::c_uint = 1;
pub const __USE_SVID: ::libc::c_uint = 1;
pub const __USE_ATFILE: ::libc::c_uint = 1;
pub const __USE_FORTIFY_LEVEL: ::libc::c_uint = 0;
pub const _STDC_PREDEF_H: ::libc::c_uint = 1;
pub const __STDC_IEC_559__: ::libc::c_uint = 1;
pub const __STDC_IEC_559_COMPLEX__: ::libc::c_uint = 1;
pub const __STDC_NO_THREADS__: ::libc::c_uint = 1;
pub const __GNU_LIBRARY__: ::libc::c_uint = 6;
pub const __GLIBC__: ::libc::c_uint = 2;
pub const __GLIBC_MINOR__: ::libc::c_uint = 19;
pub const _SYS_CDEFS_H: ::libc::c_uint = 1;
pub const __WORDSIZE: ::libc::c_uint = 64;
pub const __WORDSIZE_TIME64_COMPAT32: ::libc::c_uint = 1;
pub const __SYSCALL_WORDSIZE: ::libc::c_uint = 64;
pub const _STDINT_H: ::libc::c_uint = 1;
pub const _BITS_WCHAR_H: ::libc::c_uint = 1;
pub const ____gwchar_t_defined: ::libc::c_uint = 1;
pub const MD_CONTEXT_IA64: ::libc::c_uint = 524288;
pub const MD_CONTEXT_SHX: ::libc::c_uint = 192;
pub const MD_CONTEXT_ALPHA: ::libc::c_uint = 131072;
pub const MD_CONTEXT_CPU_MASK: ::libc::c_uint = 4294967040;
pub const MD_CONTEXT_AMD64_VR_COUNT: ::libc::c_uint = 26;
pub const MD_CONTEXT_AMD64: ::libc::c_uint = 1048576;
pub const MD_FLOATINGSAVEAREA_ARM_FPR_COUNT: ::libc::c_uint = 32;
pub const MD_FLOATINGSAVEAREA_ARM_FPEXTRA_COUNT: ::libc::c_uint = 8;
pub const MD_CONTEXT_ARM_GPR_COUNT: ::libc::c_uint = 16;
pub const MD_CONTEXT_ARM_OLD: ::libc::c_uint = 64;
pub const MD_CONTEXT_ARM: ::libc::c_uint = 1073741824;
pub const MD_FLOATINGSAVEAREA_ARM64_FPR_COUNT: ::libc::c_uint = 32;
pub const MD_CONTEXT_ARM64_GPR_COUNT: ::libc::c_uint = 33;
pub const MD_CONTEXT_ARM64: ::libc::c_uint = 2147483648;
pub const MD_CONTEXT_MIPS_GPR_COUNT: ::libc::c_uint = 32;
pub const MD_FLOATINGSAVEAREA_MIPS_FPR_COUNT: ::libc::c_uint = 32;
pub const MD_CONTEXT_MIPS_DSP_COUNT: ::libc::c_uint = 3;
pub const MD_CONTEXT_MIPS: ::libc::c_uint = 262144;
pub const MD_FLOATINGSAVEAREA_PPC_FPR_COUNT: ::libc::c_uint = 32;
pub const MD_VECTORSAVEAREA_PPC_VR_COUNT: ::libc::c_uint = 32;
pub const MD_CONTEXT_PPC_GPR_COUNT: ::libc::c_uint = 32;
pub const MD_CONTEXT_PPC: ::libc::c_uint = 536870912;
pub const MD_CONTEXT_PPC64: ::libc::c_uint = 16777216;
pub const MD_FLOATINGSAVEAREA_SPARC_FPR_COUNT: ::libc::c_uint = 32;
pub const MD_CONTEXT_SPARC_GPR_COUNT: ::libc::c_uint = 32;
pub const MD_CONTEXT_SPARC: ::libc::c_uint = 268435456;
pub const MD_FLOATINGSAVEAREA_X86_REGISTERAREA_SIZE: ::libc::c_uint = 80;
pub const MD_CONTEXT_X86_EXTENDED_REGISTERS_SIZE: ::libc::c_uint = 512;
pub const MD_CONTEXT_X86: ::libc::c_uint = 65536;
pub const MD_VSFIXEDFILEINFO_SIGNATURE: ::libc::c_uint = 4277077181;
pub const MD_VSFIXEDFILEINFO_VERSION: ::libc::c_uint = 65536;
pub const MD_VSFIXEDFILEINFO_FILE_FLAGS_DEBUG: ::libc::c_uint = 1;
pub const MD_VSFIXEDFILEINFO_FILE_FLAGS_PRERELEASE: ::libc::c_uint = 2;
pub const MD_VSFIXEDFILEINFO_FILE_FLAGS_PATCHED: ::libc::c_uint = 4;
pub const MD_VSFIXEDFILEINFO_FILE_FLAGS_PRIVATEBUILD: ::libc::c_uint = 8;
pub const MD_VSFIXEDFILEINFO_FILE_FLAGS_INFOINFERRED: ::libc::c_uint = 16;
pub const MD_VSFIXEDFILEINFO_FILE_FLAGS_SPECIALBUILD: ::libc::c_uint = 32;
pub const MD_VSFIXEDFILEINFO_FILE_OS_UNKNOWN: ::libc::c_uint = 0;
pub const MD_VSFIXEDFILEINFO_FILE_OS__BASE: ::libc::c_uint = 0;
pub const MD_VSFIXEDFILEINFO_FILE_OS__WINDOWS16: ::libc::c_uint = 1;
pub const MD_VSFIXEDFILEINFO_FILE_OS__PM16: ::libc::c_uint = 2;
pub const MD_VSFIXEDFILEINFO_FILE_OS__PM32: ::libc::c_uint = 3;
pub const MD_VSFIXEDFILEINFO_FILE_OS__WINDOWS32: ::libc::c_uint = 4;
pub const MD_VSFIXEDFILEINFO_FILE_TYPE_UNKNOWN: ::libc::c_uint = 0;
pub const MD_VSFIXEDFILEINFO_FILE_TYPE_APP: ::libc::c_uint = 1;
pub const MD_VSFIXEDFILEINFO_FILE_TYPE_DLL: ::libc::c_uint = 2;
pub const MD_VSFIXEDFILEINFO_FILE_TYPE_DRV: ::libc::c_uint = 3;
pub const MD_VSFIXEDFILEINFO_FILE_TYPE_FONT: ::libc::c_uint = 4;
pub const MD_VSFIXEDFILEINFO_FILE_TYPE_VXD: ::libc::c_uint = 5;
pub const MD_VSFIXEDFILEINFO_FILE_TYPE_STATIC_LIB: ::libc::c_uint = 7;
pub const MD_VSFIXEDFILEINFO_FILE_SUBTYPE_UNKNOWN: ::libc::c_uint = 0;
pub const MD_VSFIXEDFILEINFO_FILE_SUBTYPE_DRV_PRINTER: ::libc::c_uint = 1;
pub const MD_VSFIXEDFILEINFO_FILE_SUBTYPE_DRV_KEYBOARD: ::libc::c_uint = 2;
pub const MD_VSFIXEDFILEINFO_FILE_SUBTYPE_DRV_LANGUAGE: ::libc::c_uint = 3;
pub const MD_VSFIXEDFILEINFO_FILE_SUBTYPE_DRV_DISPLAY: ::libc::c_uint = 4;
pub const MD_VSFIXEDFILEINFO_FILE_SUBTYPE_DRV_MOUSE: ::libc::c_uint = 5;
pub const MD_VSFIXEDFILEINFO_FILE_SUBTYPE_DRV_NETWORK: ::libc::c_uint = 6;
pub const MD_VSFIXEDFILEINFO_FILE_SUBTYPE_DRV_SYSTEM: ::libc::c_uint = 7;
pub const MD_VSFIXEDFILEINFO_FILE_SUBTYPE_DRV_INSTALLABLE: ::libc::c_uint = 8;
pub const MD_VSFIXEDFILEINFO_FILE_SUBTYPE_DRV_SOUND: ::libc::c_uint = 9;
pub const MD_VSFIXEDFILEINFO_FILE_SUBTYPE_DRV_COMM: ::libc::c_uint = 10;
pub const MD_VSFIXEDFILEINFO_FILE_SUBTYPE_DRV_INPUTMETHOD: ::libc::c_uint =
    11;
pub const MD_VSFIXEDFILEINFO_FILE_SUBTYPE_DRV_VERSIONED_PRINTER:
          ::libc::c_uint =
    12;
pub const MD_VSFIXEDFILEINFO_FILE_SUBTYPE_FONT_RASTER: ::libc::c_uint = 1;
pub const MD_VSFIXEDFILEINFO_FILE_SUBTYPE_FONT_VECTOR: ::libc::c_uint = 2;
pub const MD_VSFIXEDFILEINFO_FILE_SUBTYPE_FONT_TRUETYPE: ::libc::c_uint = 3;
pub const MD_HEADER_SIGNATURE: ::libc::c_uint = 1347241037;
pub const MD_HEADER_VERSION: ::libc::c_uint = 42899;
pub const MD_MODULE_SIZE: ::libc::c_uint = 108;
pub const MD_CVINFOPDB20_SIGNATURE: ::libc::c_uint = 808534606;
pub const MD_CVINFOPDB70_SIGNATURE: ::libc::c_uint = 1396986706;
pub const MD_CVINFOCV41_SIGNATURE: ::libc::c_uint = 959464014;
pub const MD_CVINFOCV50_SIGNATURE: ::libc::c_uint = 825311822;
pub const MD_CVINFOUNKNOWN_SIGNATURE: ::libc::c_uint = 4294967295;
pub const MD_EXCEPTION_MAXIMUM_PARAMETERS: ::libc::c_uint = 15;
pub const MD_MAX_PATH: ::libc::c_uint = 260;
pub type ptrdiff_t = ::libc::c_long;
pub type size_t = ::libc::c_ulong;
pub type wchar_t = ::libc::c_int;
pub type int8_t = ::libc::c_char;
pub type int16_t = ::libc::c_short;
pub type int32_t = ::libc::c_int;
pub type int64_t = ::libc::c_long;
pub type uint8_t = ::libc::c_uchar;
pub type uint16_t = ::libc::c_ushort;
pub type uint32_t = ::libc::c_uint;
pub type uint64_t = ::libc::c_ulong;
pub type int_least8_t = ::libc::c_char;
pub type int_least16_t = ::libc::c_short;
pub type int_least32_t = ::libc::c_int;
pub type int_least64_t = ::libc::c_long;
pub type uint_least8_t = ::libc::c_uchar;
pub type uint_least16_t = ::libc::c_ushort;
pub type uint_least32_t = ::libc::c_uint;
pub type uint_least64_t = ::libc::c_ulong;
pub type int_fast8_t = ::libc::c_char;
pub type int_fast16_t = ::libc::c_long;
pub type int_fast32_t = ::libc::c_long;
pub type int_fast64_t = ::libc::c_long;
pub type uint_fast8_t = ::libc::c_uchar;
pub type uint_fast16_t = ::libc::c_ulong;
pub type uint_fast32_t = ::libc::c_ulong;
pub type uint_fast64_t = ::libc::c_ulong;
pub type intptr_t = ::libc::c_long;
pub type uintptr_t = ::libc::c_ulong;
pub type intmax_t = ::libc::c_long;
pub type uintmax_t = ::libc::c_ulong;
pub type __gwchar_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed1 {
    pub quot: ::libc::c_long,
    pub rem: ::libc::c_long,
}
impl ::std::clone::Clone for Struct_Unnamed1 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type imaxdiv_t = Struct_Unnamed1;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed2 {
    pub high: uint64_t,
    pub low: uint64_t,
}
impl ::std::clone::Clone for Struct_Unnamed2 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type uint128_struct = Struct_Unnamed2;
pub type breakpad_time_t = uint64_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed3 {
    pub data1: uint32_t,
    pub data2: uint16_t,
    pub data3: uint16_t,
    pub data4: [uint8_t; 8usize],
}
impl ::std::clone::Clone for Struct_Unnamed3 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MDGUID = Struct_Unnamed3;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed4 {
    pub context_flags: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed4 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MDRawContextBase = Struct_Unnamed4;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed5 {
    pub control_word: uint16_t,
    pub status_word: uint16_t,
    pub tag_word: uint8_t,
    pub reserved1: uint8_t,
    pub error_opcode: uint16_t,
    pub error_offset: uint32_t,
    pub error_selector: uint16_t,
    pub reserved2: uint16_t,
    pub data_offset: uint32_t,
    pub data_selector: uint16_t,
    pub reserved3: uint16_t,
    pub mx_csr: uint32_t,
    pub mx_csr_mask: uint32_t,
    pub float_registers: [uint128_struct; 8usize],
    pub xmm_registers: [uint128_struct; 16usize],
    pub reserved4: [uint8_t; 96usize],
}
impl ::std::clone::Clone for Struct_Unnamed5 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed5 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MDXmmSaveArea32AMD64 = Struct_Unnamed5;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed6 {
    pub p1_home: uint64_t,
    pub p2_home: uint64_t,
    pub p3_home: uint64_t,
    pub p4_home: uint64_t,
    pub p5_home: uint64_t,
    pub p6_home: uint64_t,
    pub context_flags: uint32_t,
    pub mx_csr: uint32_t,
    pub cs: uint16_t,
    pub ds: uint16_t,
    pub es: uint16_t,
    pub fs: uint16_t,
    pub gs: uint16_t,
    pub ss: uint16_t,
    pub eflags: uint32_t,
    pub dr0: uint64_t,
    pub dr1: uint64_t,
    pub dr2: uint64_t,
    pub dr3: uint64_t,
    pub dr6: uint64_t,
    pub dr7: uint64_t,
    pub rax: uint64_t,
    pub rcx: uint64_t,
    pub rdx: uint64_t,
    pub rbx: uint64_t,
    pub rsp: uint64_t,
    pub rbp: uint64_t,
    pub rsi: uint64_t,
    pub rdi: uint64_t,
    pub r8: uint64_t,
    pub r9: uint64_t,
    pub r10: uint64_t,
    pub r11: uint64_t,
    pub r12: uint64_t,
    pub r13: uint64_t,
    pub r14: uint64_t,
    pub r15: uint64_t,
    pub rip: uint64_t,
    pub _bindgen_data_1_: [u64; 64usize],
    pub vector_register: [uint128_struct; 26usize],
    pub vector_control: uint64_t,
    pub debug_control: uint64_t,
    pub last_branch_to_rip: uint64_t,
    pub last_branch_from_rip: uint64_t,
    pub last_exception_to_rip: uint64_t,
    pub last_exception_from_rip: uint64_t,
}
impl Struct_Unnamed6 {
    pub unsafe fn flt_save(&mut self) -> *mut MDXmmSaveArea32AMD64 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn sse_registers(&mut self) -> *mut Struct_Unnamed7 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Struct_Unnamed6 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed6 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed7 {
    pub header: [uint128_struct; 2usize],
    pub legacy: [uint128_struct; 8usize],
    pub xmm0: uint128_struct,
    pub xmm1: uint128_struct,
    pub xmm2: uint128_struct,
    pub xmm3: uint128_struct,
    pub xmm4: uint128_struct,
    pub xmm5: uint128_struct,
    pub xmm6: uint128_struct,
    pub xmm7: uint128_struct,
    pub xmm8: uint128_struct,
    pub xmm9: uint128_struct,
    pub xmm10: uint128_struct,
    pub xmm11: uint128_struct,
    pub xmm12: uint128_struct,
    pub xmm13: uint128_struct,
    pub xmm14: uint128_struct,
    pub xmm15: uint128_struct,
}
impl ::std::clone::Clone for Struct_Unnamed7 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed7 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MDRawContextAMD64 = Struct_Unnamed6;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed8 {
    pub fpscr: uint64_t,
    pub regs: [uint64_t; 32usize],
    pub extra: [uint32_t; 8usize],
}
impl ::std::clone::Clone for Struct_Unnamed8 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed8 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MDFloatingSaveAreaARM = Struct_Unnamed8;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed9 {
    pub context_flags: uint32_t,
    pub iregs: [uint32_t; 16usize],
    pub cpsr: uint32_t,
    pub float_save: MDFloatingSaveAreaARM,
}
impl ::std::clone::Clone for Struct_Unnamed9 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed9 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MDRawContextARM = Struct_Unnamed9;
pub type Enum_MDARMRegisterNumbers = ::libc::c_uint;
pub const MD_CONTEXT_ARM_REG_IOS_FP: ::libc::c_uint = 7;
pub const MD_CONTEXT_ARM_REG_FP: ::libc::c_uint = 11;
pub const MD_CONTEXT_ARM_REG_SP: ::libc::c_uint = 13;
pub const MD_CONTEXT_ARM_REG_LR: ::libc::c_uint = 14;
pub const MD_CONTEXT_ARM_REG_PC: ::libc::c_uint = 15;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed10 {
    pub fpsr: uint32_t,
    pub fpcr: uint32_t,
    pub regs: [uint128_struct; 32usize],
}
impl ::std::clone::Clone for Struct_Unnamed10 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed10 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MDFloatingSaveAreaARM64 = Struct_Unnamed10;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed11 {
    pub context_flags: uint64_t,
    pub iregs: [uint64_t; 33usize],
    pub cpsr: uint32_t,
    pub float_save: MDFloatingSaveAreaARM64,
}
impl ::std::clone::Clone for Struct_Unnamed11 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed11 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MDRawContextARM64 = Struct_Unnamed11;
pub type Enum_MDARM64RegisterNumbers = ::libc::c_uint;
pub const MD_CONTEXT_ARM64_REG_FP: ::libc::c_uint = 29;
pub const MD_CONTEXT_ARM64_REG_LR: ::libc::c_uint = 30;
pub const MD_CONTEXT_ARM64_REG_SP: ::libc::c_uint = 31;
pub const MD_CONTEXT_ARM64_REG_PC: ::libc::c_uint = 32;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed12 {
    pub regs: [uint64_t; 32usize],
    pub fpcsr: uint32_t,
    pub fir: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed12 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed12 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MDFloatingSaveAreaMIPS = Struct_Unnamed12;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed13 {
    pub context_flags: uint32_t,
    pub _pad0: uint32_t,
    pub iregs: [uint64_t; 32usize],
    pub mdhi: uint64_t,
    pub mdlo: uint64_t,
    pub hi: [uint32_t; 3usize],
    pub lo: [uint32_t; 3usize],
    pub dsp_control: uint32_t,
    pub _pad1: uint32_t,
    pub epc: uint64_t,
    pub badvaddr: uint64_t,
    pub status: uint32_t,
    pub cause: uint32_t,
    pub float_save: MDFloatingSaveAreaMIPS,
}
impl ::std::clone::Clone for Struct_Unnamed13 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed13 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MDRawContextMIPS = Struct_Unnamed13;
pub type Enum_MDMIPSRegisterNumbers = ::libc::c_uint;
pub const MD_CONTEXT_MIPS_REG_S0: ::libc::c_uint = 16;
pub const MD_CONTEXT_MIPS_REG_S1: ::libc::c_uint = 17;
pub const MD_CONTEXT_MIPS_REG_S2: ::libc::c_uint = 18;
pub const MD_CONTEXT_MIPS_REG_S3: ::libc::c_uint = 19;
pub const MD_CONTEXT_MIPS_REG_S4: ::libc::c_uint = 20;
pub const MD_CONTEXT_MIPS_REG_S5: ::libc::c_uint = 21;
pub const MD_CONTEXT_MIPS_REG_S6: ::libc::c_uint = 22;
pub const MD_CONTEXT_MIPS_REG_S7: ::libc::c_uint = 23;
pub const MD_CONTEXT_MIPS_REG_GP: ::libc::c_uint = 28;
pub const MD_CONTEXT_MIPS_REG_SP: ::libc::c_uint = 29;
pub const MD_CONTEXT_MIPS_REG_FP: ::libc::c_uint = 30;
pub const MD_CONTEXT_MIPS_REG_RA: ::libc::c_uint = 31;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed14 {
    pub fpregs: [uint64_t; 32usize],
    pub fpscr_pad: uint32_t,
    pub fpscr: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed14 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed14 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MDFloatingSaveAreaPPC = Struct_Unnamed14;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed15 {
    pub save_vr: [uint128_struct; 32usize],
    pub save_vscr: uint128_struct,
    pub save_pad5: [uint32_t; 4usize],
    pub save_vrvalid: uint32_t,
    pub save_pad6: [uint32_t; 7usize],
}
impl ::std::clone::Clone for Struct_Unnamed15 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed15 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MDVectorSaveAreaPPC = Struct_Unnamed15;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed16 {
    pub context_flags: uint32_t,
    pub srr0: uint32_t,
    pub srr1: uint32_t,
    pub gpr: [uint32_t; 32usize],
    pub cr: uint32_t,
    pub xer: uint32_t,
    pub lr: uint32_t,
    pub ctr: uint32_t,
    pub mq: uint32_t,
    pub vrsave: uint32_t,
    pub float_save: MDFloatingSaveAreaPPC,
    pub vector_save: MDVectorSaveAreaPPC,
}
impl ::std::clone::Clone for Struct_Unnamed16 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed16 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MDRawContextPPC = Struct_Unnamed16;
pub type MDFloatingSaveAreaPPC64 = MDFloatingSaveAreaPPC;
pub type MDVectorSaveAreaPPC64 = MDVectorSaveAreaPPC;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed17 {
    pub context_flags: uint64_t,
    pub srr0: uint64_t,
    pub srr1: uint64_t,
    pub gpr: [uint64_t; 32usize],
    pub cr: uint64_t,
    pub xer: uint64_t,
    pub lr: uint64_t,
    pub ctr: uint64_t,
    pub vrsave: uint64_t,
    pub float_save: MDFloatingSaveAreaPPC,
    pub vector_save: MDVectorSaveAreaPPC,
}
impl ::std::clone::Clone for Struct_Unnamed17 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed17 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MDRawContextPPC64 = Struct_Unnamed17;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed18 {
    pub regs: [uint64_t; 32usize],
    pub filler: uint64_t,
    pub fsr: uint64_t,
}
impl ::std::clone::Clone for Struct_Unnamed18 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed18 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MDFloatingSaveAreaSPARC = Struct_Unnamed18;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed19 {
    pub context_flags: uint32_t,
    pub flag_pad: uint32_t,
    pub g_r: [uint64_t; 32usize],
    pub ccr: uint64_t,
    pub pc: uint64_t,
    pub npc: uint64_t,
    pub y: uint64_t,
    pub asi: uint64_t,
    pub fprs: uint64_t,
    pub float_save: MDFloatingSaveAreaSPARC,
}
impl ::std::clone::Clone for Struct_Unnamed19 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed19 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MDRawContextSPARC = Struct_Unnamed19;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed20 {
    pub control_word: uint32_t,
    pub status_word: uint32_t,
    pub tag_word: uint32_t,
    pub error_offset: uint32_t,
    pub error_selector: uint32_t,
    pub data_offset: uint32_t,
    pub data_selector: uint32_t,
    pub register_area: [uint8_t; 80usize],
    pub cr0_npx_state: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed20 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed20 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MDFloatingSaveAreaX86 = Struct_Unnamed20;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed21 {
    pub context_flags: uint32_t,
    pub dr0: uint32_t,
    pub dr1: uint32_t,
    pub dr2: uint32_t,
    pub dr3: uint32_t,
    pub dr6: uint32_t,
    pub dr7: uint32_t,
    pub float_save: MDFloatingSaveAreaX86,
    pub gs: uint32_t,
    pub fs: uint32_t,
    pub es: uint32_t,
    pub ds: uint32_t,
    pub edi: uint32_t,
    pub esi: uint32_t,
    pub ebx: uint32_t,
    pub edx: uint32_t,
    pub ecx: uint32_t,
    pub eax: uint32_t,
    pub ebp: uint32_t,
    pub eip: uint32_t,
    pub cs: uint32_t,
    pub eflags: uint32_t,
    pub esp: uint32_t,
    pub ss: uint32_t,
    pub extended_registers: [uint8_t; 512usize],
}
impl ::std::clone::Clone for Struct_Unnamed21 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed21 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MDRawContextX86 = Struct_Unnamed21;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed22 {
    pub signature: uint32_t,
    pub struct_version: uint32_t,
    pub file_version_hi: uint32_t,
    pub file_version_lo: uint32_t,
    pub product_version_hi: uint32_t,
    pub product_version_lo: uint32_t,
    pub file_flags_mask: uint32_t,
    pub file_flags: uint32_t,
    pub file_os: uint32_t,
    pub file_type: uint32_t,
    pub file_subtype: uint32_t,
    pub file_date_hi: uint32_t,
    pub file_date_lo: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed22 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed22 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MDVSFixedFileInfo = Struct_Unnamed22;
pub type MDRVA = uint32_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed23 {
    pub data_size: uint32_t,
    pub rva: MDRVA,
}
impl ::std::clone::Clone for Struct_Unnamed23 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed23 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MDLocationDescriptor = Struct_Unnamed23;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed24 {
    pub start_of_memory_range: uint64_t,
    pub memory: MDLocationDescriptor,
}
impl ::std::clone::Clone for Struct_Unnamed24 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed24 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MDMemoryDescriptor = Struct_Unnamed24;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed25 {
    pub signature: uint32_t,
    pub version: uint32_t,
    pub stream_count: uint32_t,
    pub stream_directory_rva: MDRVA,
    pub checksum: uint32_t,
    pub time_date_stamp: uint32_t,
    pub flags: uint64_t,
}
impl ::std::clone::Clone for Struct_Unnamed25 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed25 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MDRawHeader = Struct_Unnamed25;
pub type Enum_Unnamed26 = ::libc::c_uint;
pub const MD_NORMAL: ::libc::c_uint = 0;
pub const MD_WITH_DATA_SEGS: ::libc::c_uint = 1;
pub const MD_WITH_FULL_MEMORY: ::libc::c_uint = 2;
pub const MD_WITH_HANDLE_DATA: ::libc::c_uint = 4;
pub const MD_FILTER_MEMORY: ::libc::c_uint = 8;
pub const MD_SCAN_MEMORY: ::libc::c_uint = 16;
pub const MD_WITH_UNLOADED_MODULES: ::libc::c_uint = 32;
pub const MD_WITH_INDIRECTLY_REFERENCED_MEMORY: ::libc::c_uint = 64;
pub const MD_FILTER_MODULE_PATHS: ::libc::c_uint = 128;
pub const MD_WITH_PROCESS_THREAD_DATA: ::libc::c_uint = 256;
pub const MD_WITH_PRIVATE_READ_WRITE_MEMORY: ::libc::c_uint = 512;
pub const MD_WITHOUT_OPTIONAL_DATA: ::libc::c_uint = 1024;
pub const MD_WITH_FULL_MEMORY_INFO: ::libc::c_uint = 2048;
pub const MD_WITH_THREAD_INFO: ::libc::c_uint = 4096;
pub const MD_WITH_CODE_SEGS: ::libc::c_uint = 8192;
pub const MD_WITHOUT_AUXILLIARY_SEGS: ::libc::c_uint = 16384;
pub const MD_WITH_FULL_AUXILLIARY_STATE: ::libc::c_uint = 32768;
pub const MD_WITH_PRIVATE_WRITE_COPY_MEMORY: ::libc::c_uint = 65536;
pub const MD_IGNORE_INACCESSIBLE_MEMORY: ::libc::c_uint = 131072;
pub const MD_WITH_TOKEN_INFORMATION: ::libc::c_uint = 262144;
pub type MDType = Enum_Unnamed26;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed27 {
    pub stream_type: uint32_t,
    pub location: MDLocationDescriptor,
}
impl ::std::clone::Clone for Struct_Unnamed27 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed27 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MDRawDirectory = Struct_Unnamed27;
pub type Enum_Unnamed28 = ::libc::c_uint;
pub const MD_UNUSED_STREAM: ::libc::c_uint = 0;
pub const MD_RESERVED_STREAM_0: ::libc::c_uint = 1;
pub const MD_RESERVED_STREAM_1: ::libc::c_uint = 2;
pub const MD_THREAD_LIST_STREAM: ::libc::c_uint = 3;
pub const MD_MODULE_LIST_STREAM: ::libc::c_uint = 4;
pub const MD_MEMORY_LIST_STREAM: ::libc::c_uint = 5;
pub const MD_EXCEPTION_STREAM: ::libc::c_uint = 6;
pub const MD_SYSTEM_INFO_STREAM: ::libc::c_uint = 7;
pub const MD_THREAD_EX_LIST_STREAM: ::libc::c_uint = 8;
pub const MD_MEMORY_64_LIST_STREAM: ::libc::c_uint = 9;
pub const MD_COMMENT_STREAM_A: ::libc::c_uint = 10;
pub const MD_COMMENT_STREAM_W: ::libc::c_uint = 11;
pub const MD_HANDLE_DATA_STREAM: ::libc::c_uint = 12;
pub const MD_FUNCTION_TABLE_STREAM: ::libc::c_uint = 13;
pub const MD_UNLOADED_MODULE_LIST_STREAM: ::libc::c_uint = 14;
pub const MD_MISC_INFO_STREAM: ::libc::c_uint = 15;
pub const MD_MEMORY_INFO_LIST_STREAM: ::libc::c_uint = 16;
pub const MD_THREAD_INFO_LIST_STREAM: ::libc::c_uint = 17;
pub const MD_HANDLE_OPERATION_LIST_STREAM: ::libc::c_uint = 18;
pub const MD_LAST_RESERVED_STREAM: ::libc::c_uint = 65535;
pub const MD_BREAKPAD_INFO_STREAM: ::libc::c_uint = 1197932545;
pub const MD_ASSERTION_INFO_STREAM: ::libc::c_uint = 1197932546;
pub const MD_LINUX_CPU_INFO: ::libc::c_uint = 1197932547;
pub const MD_LINUX_PROC_STATUS: ::libc::c_uint = 1197932548;
pub const MD_LINUX_LSB_RELEASE: ::libc::c_uint = 1197932549;
pub const MD_LINUX_CMD_LINE: ::libc::c_uint = 1197932550;
pub const MD_LINUX_ENVIRON: ::libc::c_uint = 1197932551;
pub const MD_LINUX_AUXV: ::libc::c_uint = 1197932552;
pub const MD_LINUX_MAPS: ::libc::c_uint = 1197932553;
pub const MD_LINUX_DSO_DEBUG: ::libc::c_uint = 1197932554;
pub type MDStreamType = Enum_Unnamed28;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed29 {
    pub length: uint32_t,
    pub buffer: [uint16_t; 1usize],
}
impl ::std::clone::Clone for Struct_Unnamed29 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed29 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MDString = Struct_Unnamed29;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed30 {
    pub thread_id: uint32_t,
    pub suspend_count: uint32_t,
    pub priority_class: uint32_t,
    pub priority: uint32_t,
    pub teb: uint64_t,
    pub stack: MDMemoryDescriptor,
    pub thread_context: MDLocationDescriptor,
}
impl ::std::clone::Clone for Struct_Unnamed30 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed30 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MDRawThread = Struct_Unnamed30;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed31 {
    pub number_of_threads: uint32_t,
    pub threads: [MDRawThread; 1usize],
}
impl ::std::clone::Clone for Struct_Unnamed31 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed31 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MDRawThreadList = Struct_Unnamed31;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed32 {
    pub base_of_image: uint64_t,
    pub size_of_image: uint32_t,
    pub checksum: uint32_t,
    pub time_date_stamp: uint32_t,
    pub module_name_rva: MDRVA,
    pub version_info: MDVSFixedFileInfo,
    pub cv_record: MDLocationDescriptor,
    pub misc_record: MDLocationDescriptor,
    pub reserved0: [uint32_t; 2usize],
    pub reserved1: [uint32_t; 2usize],
}
impl ::std::clone::Clone for Struct_Unnamed32 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed32 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MDRawModule = Struct_Unnamed32;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed33 {
    pub signature: uint32_t,
    pub offset: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed33 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed33 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MDCVHeader = Struct_Unnamed33;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed34 {
    pub cv_header: MDCVHeader,
    pub signature: uint32_t,
    pub age: uint32_t,
    pub pdb_file_name: [uint8_t; 1usize],
}
impl ::std::clone::Clone for Struct_Unnamed34 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed34 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MDCVInfoPDB20 = Struct_Unnamed34;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed35 {
    pub cv_signature: uint32_t,
    pub signature: MDGUID,
    pub age: uint32_t,
    pub pdb_file_name: [uint8_t; 1usize],
}
impl ::std::clone::Clone for Struct_Unnamed35 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed35 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MDCVInfoPDB70 = Struct_Unnamed35;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed36 {
    pub data1: [uint32_t; 2usize],
    pub data2: uint32_t,
    pub data3: uint32_t,
    pub data4: uint32_t,
    pub data5: [uint32_t; 3usize],
    pub extra: [uint8_t; 2usize],
}
impl ::std::clone::Clone for Struct_Unnamed36 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed36 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MDCVInfoELF = Struct_Unnamed36;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed37 {
    pub data_type: uint32_t,
    pub length: uint32_t,
    pub unicode: uint8_t,
    pub reserved: [uint8_t; 3usize],
    pub data: [uint8_t; 1usize],
}
impl ::std::clone::Clone for Struct_Unnamed37 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed37 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MDImageDebugMisc = Struct_Unnamed37;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed38 {
    pub number_of_modules: uint32_t,
    pub modules: [MDRawModule; 1usize],
}
impl ::std::clone::Clone for Struct_Unnamed38 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed38 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MDRawModuleList = Struct_Unnamed38;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed39 {
    pub number_of_memory_ranges: uint32_t,
    pub memory_ranges: [MDMemoryDescriptor; 1usize],
}
impl ::std::clone::Clone for Struct_Unnamed39 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed39 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MDRawMemoryList = Struct_Unnamed39;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed40 {
    pub exception_code: uint32_t,
    pub exception_flags: uint32_t,
    pub exception_record: uint64_t,
    pub exception_address: uint64_t,
    pub number_parameters: uint32_t,
    pub __align: uint32_t,
    pub exception_information: [uint64_t; 15usize],
}
impl ::std::clone::Clone for Struct_Unnamed40 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed40 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MDException = Struct_Unnamed40;
pub type Enum_Unnamed41 = ::libc::c_uint;
pub const MD_EXCEPTION_CODE_LIN_SIGHUP: ::libc::c_uint = 1;
pub const MD_EXCEPTION_CODE_LIN_SIGINT: ::libc::c_uint = 2;
pub const MD_EXCEPTION_CODE_LIN_SIGQUIT: ::libc::c_uint = 3;
pub const MD_EXCEPTION_CODE_LIN_SIGILL: ::libc::c_uint = 4;
pub const MD_EXCEPTION_CODE_LIN_SIGTRAP: ::libc::c_uint = 5;
pub const MD_EXCEPTION_CODE_LIN_SIGABRT: ::libc::c_uint = 6;
pub const MD_EXCEPTION_CODE_LIN_SIGBUS: ::libc::c_uint = 7;
pub const MD_EXCEPTION_CODE_LIN_SIGFPE: ::libc::c_uint = 8;
pub const MD_EXCEPTION_CODE_LIN_SIGKILL: ::libc::c_uint = 9;
pub const MD_EXCEPTION_CODE_LIN_SIGUSR1: ::libc::c_uint = 10;
pub const MD_EXCEPTION_CODE_LIN_SIGSEGV: ::libc::c_uint = 11;
pub const MD_EXCEPTION_CODE_LIN_SIGUSR2: ::libc::c_uint = 12;
pub const MD_EXCEPTION_CODE_LIN_SIGPIPE: ::libc::c_uint = 13;
pub const MD_EXCEPTION_CODE_LIN_SIGALRM: ::libc::c_uint = 14;
pub const MD_EXCEPTION_CODE_LIN_SIGTERM: ::libc::c_uint = 15;
pub const MD_EXCEPTION_CODE_LIN_SIGSTKFLT: ::libc::c_uint = 16;
pub const MD_EXCEPTION_CODE_LIN_SIGCHLD: ::libc::c_uint = 17;
pub const MD_EXCEPTION_CODE_LIN_SIGCONT: ::libc::c_uint = 18;
pub const MD_EXCEPTION_CODE_LIN_SIGSTOP: ::libc::c_uint = 19;
pub const MD_EXCEPTION_CODE_LIN_SIGTSTP: ::libc::c_uint = 20;
pub const MD_EXCEPTION_CODE_LIN_SIGTTIN: ::libc::c_uint = 21;
pub const MD_EXCEPTION_CODE_LIN_SIGTTOU: ::libc::c_uint = 22;
pub const MD_EXCEPTION_CODE_LIN_SIGURG: ::libc::c_uint = 23;
pub const MD_EXCEPTION_CODE_LIN_SIGXCPU: ::libc::c_uint = 24;
pub const MD_EXCEPTION_CODE_LIN_SIGXFSZ: ::libc::c_uint = 25;
pub const MD_EXCEPTION_CODE_LIN_SIGVTALRM: ::libc::c_uint = 26;
pub const MD_EXCEPTION_CODE_LIN_SIGPROF: ::libc::c_uint = 27;
pub const MD_EXCEPTION_CODE_LIN_SIGWINCH: ::libc::c_uint = 28;
pub const MD_EXCEPTION_CODE_LIN_SIGIO: ::libc::c_uint = 29;
pub const MD_EXCEPTION_CODE_LIN_SIGPWR: ::libc::c_uint = 30;
pub const MD_EXCEPTION_CODE_LIN_SIGSYS: ::libc::c_uint = 31;
pub const MD_EXCEPTION_CODE_LIN_DUMP_REQUESTED: ::libc::c_uint = 4294967295;
pub type MDExceptionCodeLinux = Enum_Unnamed41;
pub type Enum_Unnamed42 = ::libc::c_uint;
pub const MD_EXCEPTION_MAC_BAD_ACCESS: ::libc::c_uint = 1;
pub const MD_EXCEPTION_MAC_BAD_INSTRUCTION: ::libc::c_uint = 2;
pub const MD_EXCEPTION_MAC_ARITHMETIC: ::libc::c_uint = 3;
pub const MD_EXCEPTION_MAC_EMULATION: ::libc::c_uint = 4;
pub const MD_EXCEPTION_MAC_SOFTWARE: ::libc::c_uint = 5;
pub const MD_EXCEPTION_MAC_BREAKPOINT: ::libc::c_uint = 6;
pub const MD_EXCEPTION_MAC_SYSCALL: ::libc::c_uint = 7;
pub const MD_EXCEPTION_MAC_MACH_SYSCALL: ::libc::c_uint = 8;
pub const MD_EXCEPTION_MAC_RPC_ALERT: ::libc::c_uint = 9;
pub type MDExceptionMac = Enum_Unnamed42;
pub type Enum_Unnamed43 = ::libc::c_uint;
pub const MD_EXCEPTION_CODE_MAC_INVALID_ADDRESS: ::libc::c_uint = 1;
pub const MD_EXCEPTION_CODE_MAC_PROTECTION_FAILURE: ::libc::c_uint = 2;
pub const MD_EXCEPTION_CODE_MAC_NO_ACCESS: ::libc::c_uint = 8;
pub const MD_EXCEPTION_CODE_MAC_MEMORY_FAILURE: ::libc::c_uint = 9;
pub const MD_EXCEPTION_CODE_MAC_MEMORY_ERROR: ::libc::c_uint = 10;
pub const MD_EXCEPTION_CODE_MAC_BAD_SYSCALL: ::libc::c_uint = 65536;
pub const MD_EXCEPTION_CODE_MAC_BAD_PIPE: ::libc::c_uint = 65537;
pub const MD_EXCEPTION_CODE_MAC_ABORT: ::libc::c_uint = 65538;
pub const MD_EXCEPTION_CODE_MAC_NS_EXCEPTION: ::libc::c_uint = 3735929054;
pub const MD_EXCEPTION_CODE_MAC_ARM_DA_ALIGN: ::libc::c_uint = 257;
pub const MD_EXCEPTION_CODE_MAC_ARM_DA_DEBUG: ::libc::c_uint = 258;
pub const MD_EXCEPTION_CODE_MAC_ARM_UNDEFINED: ::libc::c_uint = 1;
pub const MD_EXCEPTION_CODE_MAC_ARM_BREAKPOINT: ::libc::c_uint = 1;
pub const MD_EXCEPTION_CODE_MAC_PPC_VM_PROT_READ: ::libc::c_uint = 257;
pub const MD_EXCEPTION_CODE_MAC_PPC_BADSPACE: ::libc::c_uint = 258;
pub const MD_EXCEPTION_CODE_MAC_PPC_UNALIGNED: ::libc::c_uint = 259;
pub const MD_EXCEPTION_CODE_MAC_PPC_INVALID_SYSCALL: ::libc::c_uint = 1;
pub const MD_EXCEPTION_CODE_MAC_PPC_UNIMPLEMENTED_INSTRUCTION: ::libc::c_uint
          =
    2;
pub const MD_EXCEPTION_CODE_MAC_PPC_PRIVILEGED_INSTRUCTION: ::libc::c_uint =
    3;
pub const MD_EXCEPTION_CODE_MAC_PPC_PRIVILEGED_REGISTER: ::libc::c_uint = 4;
pub const MD_EXCEPTION_CODE_MAC_PPC_TRACE: ::libc::c_uint = 5;
pub const MD_EXCEPTION_CODE_MAC_PPC_PERFORMANCE_MONITOR: ::libc::c_uint = 6;
pub const MD_EXCEPTION_CODE_MAC_PPC_OVERFLOW: ::libc::c_uint = 1;
pub const MD_EXCEPTION_CODE_MAC_PPC_ZERO_DIVIDE: ::libc::c_uint = 2;
pub const MD_EXCEPTION_CODE_MAC_PPC_FLOAT_INEXACT: ::libc::c_uint = 3;
pub const MD_EXCEPTION_CODE_MAC_PPC_FLOAT_ZERO_DIVIDE: ::libc::c_uint = 4;
pub const MD_EXCEPTION_CODE_MAC_PPC_FLOAT_UNDERFLOW: ::libc::c_uint = 5;
pub const MD_EXCEPTION_CODE_MAC_PPC_FLOAT_OVERFLOW: ::libc::c_uint = 6;
pub const MD_EXCEPTION_CODE_MAC_PPC_FLOAT_NOT_A_NUMBER: ::libc::c_uint = 7;
pub const MD_EXCEPTION_CODE_MAC_PPC_NO_EMULATION: ::libc::c_uint = 8;
pub const MD_EXCEPTION_CODE_MAC_PPC_ALTIVEC_ASSIST: ::libc::c_uint = 9;
pub const MD_EXCEPTION_CODE_MAC_PPC_TRAP: ::libc::c_uint = 1;
pub const MD_EXCEPTION_CODE_MAC_PPC_MIGRATE: ::libc::c_uint = 65792;
pub const MD_EXCEPTION_CODE_MAC_PPC_BREAKPOINT: ::libc::c_uint = 1;
pub const MD_EXCEPTION_CODE_MAC_X86_INVALID_OPERATION: ::libc::c_uint = 1;
pub const MD_EXCEPTION_CODE_MAC_X86_DIV: ::libc::c_uint = 1;
pub const MD_EXCEPTION_CODE_MAC_X86_INTO: ::libc::c_uint = 2;
pub const MD_EXCEPTION_CODE_MAC_X86_NOEXT: ::libc::c_uint = 3;
pub const MD_EXCEPTION_CODE_MAC_X86_EXTOVR: ::libc::c_uint = 4;
pub const MD_EXCEPTION_CODE_MAC_X86_EXTERR: ::libc::c_uint = 5;
pub const MD_EXCEPTION_CODE_MAC_X86_EMERR: ::libc::c_uint = 6;
pub const MD_EXCEPTION_CODE_MAC_X86_BOUND: ::libc::c_uint = 7;
pub const MD_EXCEPTION_CODE_MAC_X86_SSEEXTERR: ::libc::c_uint = 8;
pub const MD_EXCEPTION_CODE_MAC_X86_SGL: ::libc::c_uint = 1;
pub const MD_EXCEPTION_CODE_MAC_X86_BPT: ::libc::c_uint = 2;
pub const MD_EXCEPTION_CODE_MAC_X86_INVALID_TASK_STATE_SEGMENT: ::libc::c_uint
          =
    10;
pub const MD_EXCEPTION_CODE_MAC_X86_SEGMENT_NOT_PRESENT: ::libc::c_uint = 11;
pub const MD_EXCEPTION_CODE_MAC_X86_STACK_FAULT: ::libc::c_uint = 12;
pub const MD_EXCEPTION_CODE_MAC_X86_GENERAL_PROTECTION_FAULT: ::libc::c_uint =
    13;
pub const MD_EXCEPTION_CODE_MAC_X86_ALIGNMENT_FAULT: ::libc::c_uint = 17;
pub type MDExceptionCodeMac = Enum_Unnamed43;
pub type Enum_Unnamed44 = ::libc::c_uint;
pub const MD_EXCEPTION_CODE_PS3_UNKNOWN: ::libc::c_uint = 0;
pub const MD_EXCEPTION_CODE_PS3_TRAP_EXCEP: ::libc::c_uint = 1;
pub const MD_EXCEPTION_CODE_PS3_PRIV_INSTR: ::libc::c_uint = 2;
pub const MD_EXCEPTION_CODE_PS3_ILLEGAL_INSTR: ::libc::c_uint = 3;
pub const MD_EXCEPTION_CODE_PS3_INSTR_STORAGE: ::libc::c_uint = 4;
pub const MD_EXCEPTION_CODE_PS3_INSTR_SEGMENT: ::libc::c_uint = 5;
pub const MD_EXCEPTION_CODE_PS3_DATA_STORAGE: ::libc::c_uint = 6;
pub const MD_EXCEPTION_CODE_PS3_DATA_SEGMENT: ::libc::c_uint = 7;
pub const MD_EXCEPTION_CODE_PS3_FLOAT_POINT: ::libc::c_uint = 8;
pub const MD_EXCEPTION_CODE_PS3_DABR_MATCH: ::libc::c_uint = 9;
pub const MD_EXCEPTION_CODE_PS3_ALIGN_EXCEP: ::libc::c_uint = 10;
pub const MD_EXCEPTION_CODE_PS3_MEMORY_ACCESS: ::libc::c_uint = 11;
pub const MD_EXCEPTION_CODE_PS3_COPRO_ALIGN: ::libc::c_uint = 12;
pub const MD_EXCEPTION_CODE_PS3_COPRO_INVALID_COM: ::libc::c_uint = 13;
pub const MD_EXCEPTION_CODE_PS3_COPRO_ERR: ::libc::c_uint = 14;
pub const MD_EXCEPTION_CODE_PS3_COPRO_FIR: ::libc::c_uint = 15;
pub const MD_EXCEPTION_CODE_PS3_COPRO_DATA_SEGMENT: ::libc::c_uint = 16;
pub const MD_EXCEPTION_CODE_PS3_COPRO_DATA_STORAGE: ::libc::c_uint = 17;
pub const MD_EXCEPTION_CODE_PS3_COPRO_STOP_INSTR: ::libc::c_uint = 18;
pub const MD_EXCEPTION_CODE_PS3_COPRO_HALT_INSTR: ::libc::c_uint = 19;
pub const MD_EXCEPTION_CODE_PS3_COPRO_HALTINST_UNKNOWN: ::libc::c_uint = 20;
pub const MD_EXCEPTION_CODE_PS3_COPRO_MEMORY_ACCESS: ::libc::c_uint = 21;
pub const MD_EXCEPTION_CODE_PS3_GRAPHIC: ::libc::c_uint = 22;
pub type MDExceptionCodePS3 = Enum_Unnamed44;
pub type Enum_Unnamed45 = ::libc::c_uint;
pub const MD_EXCEPTION_CODE_SOL_SIGHUP: ::libc::c_uint = 1;
pub const MD_EXCEPTION_CODE_SOL_SIGINT: ::libc::c_uint = 2;
pub const MD_EXCEPTION_CODE_SOL_SIGQUIT: ::libc::c_uint = 3;
pub const MD_EXCEPTION_CODE_SOL_SIGILL: ::libc::c_uint = 4;
pub const MD_EXCEPTION_CODE_SOL_SIGTRAP: ::libc::c_uint = 5;
pub const MD_EXCEPTION_CODE_SOL_SIGIOT: ::libc::c_uint = 6;
pub const MD_EXCEPTION_CODE_SOL_SIGABRT: ::libc::c_uint = 6;
pub const MD_EXCEPTION_CODE_SOL_SIGEMT: ::libc::c_uint = 7;
pub const MD_EXCEPTION_CODE_SOL_SIGFPE: ::libc::c_uint = 8;
pub const MD_EXCEPTION_CODE_SOL_SIGKILL: ::libc::c_uint = 9;
pub const MD_EXCEPTION_CODE_SOL_SIGBUS: ::libc::c_uint = 10;
pub const MD_EXCEPTION_CODE_SOL_SIGSEGV: ::libc::c_uint = 11;
pub const MD_EXCEPTION_CODE_SOL_SIGSYS: ::libc::c_uint = 12;
pub const MD_EXCEPTION_CODE_SOL_SIGPIPE: ::libc::c_uint = 13;
pub const MD_EXCEPTION_CODE_SOL_SIGALRM: ::libc::c_uint = 14;
pub const MD_EXCEPTION_CODE_SOL_SIGTERM: ::libc::c_uint = 15;
pub const MD_EXCEPTION_CODE_SOL_SIGUSR1: ::libc::c_uint = 16;
pub const MD_EXCEPTION_CODE_SOL_SIGUSR2: ::libc::c_uint = 17;
pub const MD_EXCEPTION_CODE_SOL_SIGCLD: ::libc::c_uint = 18;
pub const MD_EXCEPTION_CODE_SOL_SIGCHLD: ::libc::c_uint = 18;
pub const MD_EXCEPTION_CODE_SOL_SIGPWR: ::libc::c_uint = 19;
pub const MD_EXCEPTION_CODE_SOL_SIGWINCH: ::libc::c_uint = 20;
pub const MD_EXCEPTION_CODE_SOL_SIGURG: ::libc::c_uint = 21;
pub const MD_EXCEPTION_CODE_SOL_SIGPOLL: ::libc::c_uint = 22;
pub const MD_EXCEPTION_CODE_SOL_SIGIO: ::libc::c_uint = 22;
pub const MD_EXCEPTION_CODE_SOL_SIGSTOP: ::libc::c_uint = 23;
pub const MD_EXCEPTION_CODE_SOL_SIGTSTP: ::libc::c_uint = 24;
pub const MD_EXCEPTION_CODE_SOL_SIGCONT: ::libc::c_uint = 25;
pub const MD_EXCEPTION_CODE_SOL_SIGTTIN: ::libc::c_uint = 26;
pub const MD_EXCEPTION_CODE_SOL_SIGTTOU: ::libc::c_uint = 27;
pub const MD_EXCEPTION_CODE_SOL_SIGVTALRM: ::libc::c_uint = 28;
pub const MD_EXCEPTION_CODE_SOL_SIGPROF: ::libc::c_uint = 29;
pub const MD_EXCEPTION_CODE_SOL_SIGXCPU: ::libc::c_uint = 30;
pub const MD_EXCEPTION_CODE_SOL_SIGXFSZ: ::libc::c_uint = 31;
pub const MD_EXCEPTION_CODE_SOL_SIGWAITING: ::libc::c_uint = 32;
pub const MD_EXCEPTION_CODE_SOL_SIGLWP: ::libc::c_uint = 33;
pub const MD_EXCEPTION_CODE_SOL_SIGFREEZE: ::libc::c_uint = 34;
pub const MD_EXCEPTION_CODE_SOL_SIGTHAW: ::libc::c_uint = 35;
pub const MD_EXCEPTION_CODE_SOL_SIGCANCEL: ::libc::c_uint = 36;
pub const MD_EXCEPTION_CODE_SOL_SIGLOST: ::libc::c_uint = 37;
pub const MD_EXCEPTION_CODE_SOL_SIGXRES: ::libc::c_uint = 38;
pub const MD_EXCEPTION_CODE_SOL_SIGJVM1: ::libc::c_uint = 39;
pub const MD_EXCEPTION_CODE_SOL_SIGJVM2: ::libc::c_uint = 40;
pub type MDExceptionCodeSolaris = Enum_Unnamed45;
pub type Enum_Unnamed46 = ::libc::c_uint;
pub const MD_EXCEPTION_CODE_WIN_CONTROL_C: ::libc::c_uint = 1073807365;
pub const MD_EXCEPTION_CODE_WIN_GUARD_PAGE_VIOLATION: ::libc::c_uint =
    2147483649;
pub const MD_EXCEPTION_CODE_WIN_DATATYPE_MISALIGNMENT: ::libc::c_uint =
    2147483650;
pub const MD_EXCEPTION_CODE_WIN_BREAKPOINT: ::libc::c_uint = 2147483651;
pub const MD_EXCEPTION_CODE_WIN_SINGLE_STEP: ::libc::c_uint = 2147483652;
pub const MD_EXCEPTION_CODE_WIN_ACCESS_VIOLATION: ::libc::c_uint = 3221225477;
pub const MD_EXCEPTION_CODE_WIN_IN_PAGE_ERROR: ::libc::c_uint = 3221225478;
pub const MD_EXCEPTION_CODE_WIN_INVALID_HANDLE: ::libc::c_uint = 3221225480;
pub const MD_EXCEPTION_CODE_WIN_ILLEGAL_INSTRUCTION: ::libc::c_uint =
    3221225501;
pub const MD_EXCEPTION_CODE_WIN_NONCONTINUABLE_EXCEPTION: ::libc::c_uint =
    3221225509;
pub const MD_EXCEPTION_CODE_WIN_INVALID_DISPOSITION: ::libc::c_uint =
    3221225510;
pub const MD_EXCEPTION_CODE_WIN_ARRAY_BOUNDS_EXCEEDED: ::libc::c_uint =
    3221225612;
pub const MD_EXCEPTION_CODE_WIN_FLOAT_DENORMAL_OPERAND: ::libc::c_uint =
    3221225613;
pub const MD_EXCEPTION_CODE_WIN_FLOAT_DIVIDE_BY_ZERO: ::libc::c_uint =
    3221225614;
pub const MD_EXCEPTION_CODE_WIN_FLOAT_INEXACT_RESULT: ::libc::c_uint =
    3221225615;
pub const MD_EXCEPTION_CODE_WIN_FLOAT_INVALID_OPERATION: ::libc::c_uint =
    3221225616;
pub const MD_EXCEPTION_CODE_WIN_FLOAT_OVERFLOW: ::libc::c_uint = 3221225617;
pub const MD_EXCEPTION_CODE_WIN_FLOAT_STACK_CHECK: ::libc::c_uint =
    3221225618;
pub const MD_EXCEPTION_CODE_WIN_FLOAT_UNDERFLOW: ::libc::c_uint = 3221225619;
pub const MD_EXCEPTION_CODE_WIN_INTEGER_DIVIDE_BY_ZERO: ::libc::c_uint =
    3221225620;
pub const MD_EXCEPTION_CODE_WIN_INTEGER_OVERFLOW: ::libc::c_uint = 3221225621;
pub const MD_EXCEPTION_CODE_WIN_PRIVILEGED_INSTRUCTION: ::libc::c_uint =
    3221225622;
pub const MD_EXCEPTION_CODE_WIN_STACK_OVERFLOW: ::libc::c_uint = 3221225725;
pub const MD_EXCEPTION_CODE_WIN_POSSIBLE_DEADLOCK: ::libc::c_uint =
    3221225876;
pub const MD_EXCEPTION_CODE_WIN_STACK_BUFFER_OVERRUN: ::libc::c_uint =
    3221226505;
pub const MD_EXCEPTION_CODE_WIN_HEAP_CORRUPTION: ::libc::c_uint = 3221226356;
pub const MD_EXCEPTION_CODE_WIN_UNHANDLED_CPP_EXCEPTION: ::libc::c_uint =
    3765269347;
pub type MDExceptionCodeWin = Enum_Unnamed46;
pub type Enum_Unnamed47 = ::libc::c_uint;
pub const MD_ACCESS_VIOLATION_WIN_READ: ::libc::c_uint = 0;
pub const MD_ACCESS_VIOLATION_WIN_WRITE: ::libc::c_uint = 1;
pub const MD_ACCESS_VIOLATION_WIN_EXEC: ::libc::c_uint = 8;
pub type MDAccessViolationTypeWin = Enum_Unnamed47;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed48 {
    pub thread_id: uint32_t,
    pub __align: uint32_t,
    pub exception_record: MDException,
    pub thread_context: MDLocationDescriptor,
}
impl ::std::clone::Clone for Struct_Unnamed48 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed48 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MDRawExceptionStream = Struct_Unnamed48;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed49 {
    pub _bindgen_data_: [u64; 3usize],
}
impl Union_Unnamed49 {
    pub unsafe fn x86_cpu_info(&mut self) -> *mut Struct_Unnamed50 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn arm_cpu_info(&mut self) -> *mut Struct_Unnamed51 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn other_cpu_info(&mut self) -> *mut Struct_Unnamed52 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed49 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed49 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed50 {
    pub vendor_id: [uint32_t; 3usize],
    pub version_information: uint32_t,
    pub feature_information: uint32_t,
    pub amd_extended_cpu_features: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed50 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed50 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed51 {
    pub cpuid: uint32_t,
    pub elf_hwcaps: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed51 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed51 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed52 {
    pub processor_features: [uint64_t; 2usize],
}
impl ::std::clone::Clone for Struct_Unnamed52 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed52 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MDCPUInformation = Union_Unnamed49;
pub type Enum_Unnamed53 = ::libc::c_uint;
pub const MD_CPU_ARM_ELF_HWCAP_SWP: ::libc::c_uint = 1;
pub const MD_CPU_ARM_ELF_HWCAP_HALF: ::libc::c_uint = 2;
pub const MD_CPU_ARM_ELF_HWCAP_THUMB: ::libc::c_uint = 4;
pub const MD_CPU_ARM_ELF_HWCAP_26BIT: ::libc::c_uint = 8;
pub const MD_CPU_ARM_ELF_HWCAP_FAST_MULT: ::libc::c_uint = 16;
pub const MD_CPU_ARM_ELF_HWCAP_FPA: ::libc::c_uint = 32;
pub const MD_CPU_ARM_ELF_HWCAP_VFP: ::libc::c_uint = 64;
pub const MD_CPU_ARM_ELF_HWCAP_EDSP: ::libc::c_uint = 128;
pub const MD_CPU_ARM_ELF_HWCAP_JAVA: ::libc::c_uint = 256;
pub const MD_CPU_ARM_ELF_HWCAP_IWMMXT: ::libc::c_uint = 512;
pub const MD_CPU_ARM_ELF_HWCAP_CRUNCH: ::libc::c_uint = 1024;
pub const MD_CPU_ARM_ELF_HWCAP_THUMBEE: ::libc::c_uint = 2048;
pub const MD_CPU_ARM_ELF_HWCAP_NEON: ::libc::c_uint = 4096;
pub const MD_CPU_ARM_ELF_HWCAP_VFPv3: ::libc::c_uint = 8192;
pub const MD_CPU_ARM_ELF_HWCAP_VFPv3D16: ::libc::c_uint = 16384;
pub const MD_CPU_ARM_ELF_HWCAP_TLS: ::libc::c_uint = 32768;
pub const MD_CPU_ARM_ELF_HWCAP_VFPv4: ::libc::c_uint = 65536;
pub const MD_CPU_ARM_ELF_HWCAP_IDIVA: ::libc::c_uint = 131072;
pub const MD_CPU_ARM_ELF_HWCAP_IDIVT: ::libc::c_uint = 262144;
pub type MDCPUInformationARMElfHwCaps = Enum_Unnamed53;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed54 {
    pub processor_architecture: uint16_t,
    pub processor_level: uint16_t,
    pub processor_revision: uint16_t,
    pub number_of_processors: uint8_t,
    pub product_type: uint8_t,
    pub major_version: uint32_t,
    pub minor_version: uint32_t,
    pub build_number: uint32_t,
    pub platform_id: uint32_t,
    pub csd_version_rva: MDRVA,
    pub suite_mask: uint16_t,
    pub reserved2: uint16_t,
    pub cpu: MDCPUInformation,
}
impl ::std::clone::Clone for Struct_Unnamed54 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed54 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MDRawSystemInfo = Struct_Unnamed54;
pub type Enum_Unnamed55 = ::libc::c_uint;
pub const MD_CPU_ARCHITECTURE_X86: ::libc::c_uint = 0;
pub const MD_CPU_ARCHITECTURE_MIPS: ::libc::c_uint = 1;
pub const MD_CPU_ARCHITECTURE_ALPHA: ::libc::c_uint = 2;
pub const MD_CPU_ARCHITECTURE_PPC: ::libc::c_uint = 3;
pub const MD_CPU_ARCHITECTURE_SHX: ::libc::c_uint = 4;
pub const MD_CPU_ARCHITECTURE_ARM: ::libc::c_uint = 5;
pub const MD_CPU_ARCHITECTURE_IA64: ::libc::c_uint = 6;
pub const MD_CPU_ARCHITECTURE_ALPHA64: ::libc::c_uint = 7;
pub const MD_CPU_ARCHITECTURE_MSIL: ::libc::c_uint = 8;
pub const MD_CPU_ARCHITECTURE_AMD64: ::libc::c_uint = 9;
pub const MD_CPU_ARCHITECTURE_X86_WIN64: ::libc::c_uint = 10;
pub const MD_CPU_ARCHITECTURE_SPARC: ::libc::c_uint = 32769;
pub const MD_CPU_ARCHITECTURE_PPC64: ::libc::c_uint = 32770;
pub const MD_CPU_ARCHITECTURE_ARM64: ::libc::c_uint = 32771;
pub const MD_CPU_ARCHITECTURE_UNKNOWN: ::libc::c_uint = 65535;
pub type MDCPUArchitecture = Enum_Unnamed55;
pub type Enum_Unnamed56 = ::libc::c_uint;
pub const MD_OS_WIN32S: ::libc::c_uint = 0;
pub const MD_OS_WIN32_WINDOWS: ::libc::c_uint = 1;
pub const MD_OS_WIN32_NT: ::libc::c_uint = 2;
pub const MD_OS_WIN32_CE: ::libc::c_uint = 3;
pub const MD_OS_UNIX: ::libc::c_uint = 32768;
pub const MD_OS_MAC_OS_X: ::libc::c_uint = 33025;
pub const MD_OS_IOS: ::libc::c_uint = 33026;
pub const MD_OS_LINUX: ::libc::c_uint = 33281;
pub const MD_OS_SOLARIS: ::libc::c_uint = 33282;
pub const MD_OS_ANDROID: ::libc::c_uint = 33283;
pub const MD_OS_PS3: ::libc::c_uint = 33284;
pub const MD_OS_NACL: ::libc::c_uint = 33285;
pub type MDOSPlatform = Enum_Unnamed56;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed57 {
    pub year: uint16_t,
    pub month: uint16_t,
    pub day_of_week: uint16_t,
    pub day: uint16_t,
    pub hour: uint16_t,
    pub minute: uint16_t,
    pub second: uint16_t,
    pub milliseconds: uint16_t,
}
impl ::std::clone::Clone for Struct_Unnamed57 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed57 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MDSystemTime = Struct_Unnamed57;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed58 {
    pub bias: int32_t,
    pub standard_name: [uint16_t; 32usize],
    pub standard_date: MDSystemTime,
    pub standard_bias: int32_t,
    pub daylight_name: [uint16_t; 32usize],
    pub daylight_date: MDSystemTime,
    pub daylight_bias: int32_t,
}
impl ::std::clone::Clone for Struct_Unnamed58 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed58 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MDTimeZoneInformation = Struct_Unnamed58;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed59 {
    pub size_of_info: uint32_t,
    pub flags1: uint32_t,
    pub process_id: uint32_t,
    pub process_create_time: uint32_t,
    pub process_user_time: uint32_t,
    pub process_kernel_time: uint32_t,
    pub processor_max_mhz: uint32_t,
    pub processor_current_mhz: uint32_t,
    pub processor_mhz_limit: uint32_t,
    pub processor_max_idle_state: uint32_t,
    pub processor_current_idle_state: uint32_t,
    pub process_integrity_level: uint32_t,
    pub process_execute_flags: uint32_t,
    pub protected_process: uint32_t,
    pub time_zone_id: uint32_t,
    pub time_zone: MDTimeZoneInformation,
    pub build_string: [uint16_t; 260usize],
    pub dbg_bld_str: [uint16_t; 40usize],
}
impl ::std::clone::Clone for Struct_Unnamed59 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed59 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MDRawMiscInfo = Struct_Unnamed59;
pub type Enum_Unnamed60 = ::libc::c_uint;
pub const MD_MISCINFO_FLAGS1_PROCESS_ID: ::libc::c_uint = 1;
pub const MD_MISCINFO_FLAGS1_PROCESS_TIMES: ::libc::c_uint = 2;
pub const MD_MISCINFO_FLAGS1_PROCESSOR_POWER_INFO: ::libc::c_uint = 4;
pub const MD_MISCINFO_FLAGS1_PROCESS_INTEGRITY: ::libc::c_uint = 16;
pub const MD_MISCINFO_FLAGS1_PROCESS_EXECUTE_FLAGS: ::libc::c_uint = 32;
pub const MD_MISCINFO_FLAGS1_TIMEZONE: ::libc::c_uint = 64;
pub const MD_MISCINFO_FLAGS1_PROTECTED_PROCESS: ::libc::c_uint = 128;
pub const MD_MISCINFO_FLAGS1_BUILDSTRING: ::libc::c_uint = 256;
pub type MDMiscInfoFlags1 = Enum_Unnamed60;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed61 {
    pub size_of_header: uint32_t,
    pub size_of_entry: uint32_t,
    pub number_of_entries: uint64_t,
}
impl ::std::clone::Clone for Struct_Unnamed61 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed61 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MDRawMemoryInfoList = Struct_Unnamed61;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed62 {
    pub base_address: uint64_t,
    pub allocation_base: uint64_t,
    pub allocation_protection: uint32_t,
    pub __alignment1: uint32_t,
    pub region_size: uint64_t,
    pub state: uint32_t,
    pub protection: uint32_t,
    pub _type: uint32_t,
    pub __alignment2: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed62 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed62 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MDRawMemoryInfo = Struct_Unnamed62;
pub type Enum_Unnamed63 = ::libc::c_uint;
pub const MD_MEMORY_STATE_COMMIT: ::libc::c_uint = 4096;
pub const MD_MEMORY_STATE_RESERVE: ::libc::c_uint = 8192;
pub const MD_MEMORY_STATE_FREE: ::libc::c_uint = 65536;
pub type MDMemoryState = Enum_Unnamed63;
pub type Enum_Unnamed64 = ::libc::c_uint;
pub const MD_MEMORY_PROTECT_NOACCESS: ::libc::c_uint = 1;
pub const MD_MEMORY_PROTECT_READONLY: ::libc::c_uint = 2;
pub const MD_MEMORY_PROTECT_READWRITE: ::libc::c_uint = 4;
pub const MD_MEMORY_PROTECT_WRITECOPY: ::libc::c_uint = 8;
pub const MD_MEMORY_PROTECT_EXECUTE: ::libc::c_uint = 16;
pub const MD_MEMORY_PROTECT_EXECUTE_READ: ::libc::c_uint = 32;
pub const MD_MEMORY_PROTECT_EXECUTE_READWRITE: ::libc::c_uint = 64;
pub const MD_MEMORY_PROTECT_EXECUTE_WRITECOPY: ::libc::c_uint = 128;
pub const MD_MEMORY_PROTECT_GUARD: ::libc::c_uint = 256;
pub const MD_MEMORY_PROTECT_NOCACHE: ::libc::c_uint = 512;
pub const MD_MEMORY_PROTECT_WRITECOMBINE: ::libc::c_uint = 1024;
pub type MDMemoryProtection = Enum_Unnamed64;
pub type Enum_Unnamed65 = ::libc::c_uint;
pub const MD_MEMORY_TYPE_PRIVATE: ::libc::c_uint = 131072;
pub const MD_MEMORY_TYPE_MAPPED: ::libc::c_uint = 262144;
pub const MD_MEMORY_TYPE_IMAGE: ::libc::c_uint = 16777216;
pub type MDMemoryType = Enum_Unnamed65;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed66 {
    pub validity: uint32_t,
    pub dump_thread_id: uint32_t,
    pub requesting_thread_id: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed66 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed66 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MDRawBreakpadInfo = Struct_Unnamed66;
pub type Enum_Unnamed67 = ::libc::c_uint;
pub const MD_BREAKPAD_INFO_VALID_DUMP_THREAD_ID: ::libc::c_uint = 1;
pub const MD_BREAKPAD_INFO_VALID_REQUESTING_THREAD_ID: ::libc::c_uint = 2;
pub type MDBreakpadInfoValidity = Enum_Unnamed67;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed68 {
    pub expression: [uint16_t; 128usize],
    pub function: [uint16_t; 128usize],
    pub file: [uint16_t; 128usize],
    pub line: uint32_t,
    pub _type: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed68 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed68 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MDRawAssertionInfo = Struct_Unnamed68;
pub type Enum_Unnamed69 = ::libc::c_uint;
pub const MD_ASSERTION_INFO_TYPE_UNKNOWN: ::libc::c_uint = 0;
pub const MD_ASSERTION_INFO_TYPE_INVALID_PARAMETER: ::libc::c_uint = 1;
pub const MD_ASSERTION_INFO_TYPE_PURE_VIRTUAL_CALL: ::libc::c_uint = 2;
pub type MDAssertionInfoData = Enum_Unnamed69;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed70 {
    pub addr: uint32_t,
    pub name: MDRVA,
    pub ld: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed70 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed70 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MDRawLinkMap32 = Struct_Unnamed70;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed71 {
    pub version: uint32_t,
    pub map: MDRVA,
    pub dso_count: uint32_t,
    pub brk: uint32_t,
    pub ldbase: uint32_t,
    pub dynamic: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed71 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed71 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MDRawDebug32 = Struct_Unnamed71;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed72 {
    pub addr: uint64_t,
    pub name: MDRVA,
    pub ld: uint64_t,
}
impl ::std::clone::Clone for Struct_Unnamed72 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed72 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MDRawLinkMap64 = Struct_Unnamed72;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed73 {
    pub version: uint32_t,
    pub map: MDRVA,
    pub dso_count: uint32_t,
    pub brk: uint64_t,
    pub ldbase: uint64_t,
    pub dynamic: uint64_t,
}
impl ::std::clone::Clone for Struct_Unnamed73 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed73 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MDRawDebug64 = Struct_Unnamed73;
extern "C" {
    pub static MD_MEMORY_PROTECTION_ACCESS_MASK: uint32_t;
}
extern "C" {
    pub fn imaxabs(__n: intmax_t) -> intmax_t;
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
    pub fn strtoimax(__nptr: *const ::libc::c_char,
                     __endptr: *mut *mut ::libc::c_char,
                     __base: ::libc::c_int) -> intmax_t;
    pub fn strtoumax(__nptr: *const ::libc::c_char,
                     __endptr: *mut *mut ::libc::c_char,
                     __base: ::libc::c_int) -> uintmax_t;
    pub fn wcstoimax(__nptr: *const __gwchar_t,
                     __endptr: *mut *mut __gwchar_t, __base: ::libc::c_int)
     -> intmax_t;
    pub fn wcstoumax(__nptr: *const __gwchar_t,
                     __endptr: *mut *mut __gwchar_t, __base: ::libc::c_int)
     -> uintmax_t;
}
